/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package nodeinfos

import (
	"sync"
	"time"

	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider"
	"k8s.io/autoscaler/cluster-autoscaler/context"
	"k8s.io/autoscaler/cluster-autoscaler/core/utils"
	"k8s.io/autoscaler/cluster-autoscaler/processors/nodegroupset"
	"k8s.io/autoscaler/cluster-autoscaler/utils/errors"
	"k8s.io/autoscaler/cluster-autoscaler/utils/taints"
	klog "k8s.io/klog/v2"

	schedulerframework "k8s.io/kubernetes/pkg/scheduler/framework"
)

const templateNodeInfoCacheTTL = 10 * time.Minute

// RefineNodeInfosProcessor improves NodeInfos accuracy where possible.
// For now it adjusts synthetic NodeInfos generated by TemplateInfo() with more accurate
// NodeInfos obtained from real-world nodes for similar nodegroups (when available).
type RefineNodeInfosProcessor struct {
	NodeGroupSetProcessor        nodegroupset.NodeGroupSetProcessor
	RefineUsingSimilarNodeGroups bool
	nodeInfoCache                nodeInfoCache
}

type nodeInfoCache struct {
	sync.RWMutex
	nodeInfos   map[string]*schedulerframework.NodeInfo
	lastUpdated time.Time
}

// Process refines nodeInfos obtained by TemplateInfos when possible
func (p *RefineNodeInfosProcessor) Process(ctx *context.AutoscalingContext, nodeInfosForNodeGroups map[string]*schedulerframework.NodeInfo) (map[string]*schedulerframework.NodeInfo, error) {
	inaccurateNodeInfos := make(map[string]*schedulerframework.NodeInfo)
	templatesNodeInfo := make(map[string]*schedulerframework.NodeInfo)

	// for now this processor only supports refining by leveraging similar nodegroups
	if !p.RefineUsingSimilarNodeGroups {
		return nodeInfosForNodeGroups, nil
	}

	nodeGroups := make(map[string]cloudprovider.NodeGroup)
	for _, nodeGroup := range ctx.CloudProvider.NodeGroups() {
		nodeGroups[nodeGroup.Id()] = nodeGroup
	}

	if err := p.nodeInfoCache.update(nodeGroups); err != nil {
		return nodeInfosForNodeGroups, err
	}

	ignoredTaints := make(taints.TaintKeySet)
	for _, taintKey := range ctx.IgnoredTaints {
		ignoredTaints[taintKey] = true
	}

	// build comparable (all from templates) NodeInfos
	for groupID, nodeInfo := range nodeInfosForNodeGroups {
		templatedNodeInfo, ok := p.nodeInfoCache.nodeInfos[groupID]
		if !ok || templatedNodeInfo == nil {
			continue
		}

		templatesNodeInfo[groupID] = templatedNodeInfo

		if utils.IsNodeInfoBuiltFromTemplate(nodeInfo) {
			inaccurateNodeInfos[groupID] = templatedNodeInfo
		}
	}

	// refine inaccurate nodeinfos when we can find similar nodeInfos built from real nodes
	for groupID, nodeInfo := range inaccurateNodeInfos {
		nodeGroup, ok := nodeGroups[groupID]
		if !ok {
			continue
		}

		similars, err := p.NodeGroupSetProcessor.FindSimilarNodeGroups(ctx, nodeGroup, templatesNodeInfo)
		if err != nil {
			klog.Warningf("Failed to lookup for matching node groups for %s: %v", groupID, err)
			return nodeInfosForNodeGroups, nil
		}

		for _, nodeGroup := range similars {
			similarInfo, found := nodeInfosForNodeGroups[nodeGroup.Id()]
			if !found || utils.IsNodeInfoBuiltFromTemplate(similarInfo) {
				continue
			}
			refinedNodeInfo, err := mirrorNodeInfoFromSimilarGroup(nodeInfo, similarInfo, groupID, ignoredTaints)
			if err != nil {
				return nodeInfosForNodeGroups, err
			}
			nodeInfosForNodeGroups[groupID] = refinedNodeInfo
			break
		}
	}

	return nodeInfosForNodeGroups, nil
}

// CleanUp cleans up processor's internal structures.
func (p *RefineNodeInfosProcessor) CleanUp() {
}

func mirrorNodeInfoFromSimilarGroup(oldInfo, newInfo *schedulerframework.NodeInfo, nodeGroupName string, ignoredTaints taints.TaintKeySet) (*schedulerframework.NodeInfo, errors.AutoscalerError) {
	newInfoCopy := newInfo.Clone()

	// keep locality labels (region, zone, failure domain, ...) from original template
	newNode := newInfoCopy.Node().DeepCopy()
	for label, val := range oldInfo.Node().GetLabels() {
		if _, found := nodegroupset.BasicIgnoredLabels[label]; found {
			newNode.Labels[label] = val
		}
	}
	newInfoCopy.SetNode(newNode)
	utils.SetNodeInfoBuiltFromTemplate(newInfoCopy)

	// deep copy pods and set node name (in node, pods, labels...) to the nodegroup's
	return utils.SanitizeNodeInfo(newInfoCopy, nodeGroupName, ignoredTaints)
}

func (n *nodeInfoCache) update(nodeGroups map[string]cloudprovider.NodeGroup) error {
	n.Lock()
	defer n.Unlock()

	if len(n.nodeInfos) == 0 {
		n.nodeInfos = make(map[string]*schedulerframework.NodeInfo)
		n.lastUpdated = time.Now()
	}
	needsRefresh := n.lastUpdated.Add(templateNodeInfoCacheTTL).Before(time.Now())

	for groupID := range n.nodeInfos {
		if _, ok := nodeGroups[groupID]; !ok {
			delete(n.nodeInfos, groupID)
		}
	}

	for groupID, nodeGroup := range nodeGroups {
		cachedNodeInfo, ok := n.nodeInfos[groupID]
		if ok && !needsRefresh && !utils.IsNodeInfoBuiltFromTemplate(cachedNodeInfo) {
			continue
		}

		nodeInfo, err := nodeGroup.TemplateNodeInfo()
		if err != nil {
			if err == cloudprovider.ErrNotImplemented {
				continue
			} else {
				return errors.ToAutoscalerError(errors.CloudProviderError, err)
			}
		}
		n.nodeInfos[groupID] = nodeInfo
	}

	if needsRefresh {
		n.lastUpdated = time.Now()
	}

	return nil
}
